// app/api/chatbot/route.ts
import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

// Inicializa a IA com a sua chave de API
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
const BASE_CONHECIMENTO = `
  PRIMOR M√ìVEIS - PERGUNTAS E RESPOSTAS

  # Sobre a Empresa
  - Pergunta: Voc√™s s√£o de BH? Onde fica a empresa?
    Resposta: Sim, somos uma marcenaria de Belo Horizonte! Estamos localizados no bairro Sagrada Fam√≠lia.

  - Pergunta: Qual o hor√°rio de funcionamento? Posso visitar?
    Resposta: Nosso hor√°rio de funcionamento √© de segunda a sexta, das 9h √†s 18h. N√≥s n√£o possu√≠mos um showroom, temos somente o local de produ√ß√£o (a f√°brica), caso queira nos visitar, entre em contato para agendarmos o melhor momento para voc√™!

  - Pergunta: H√° quanto tempo a Primor M√≥veis est√° no mercado?
    Resposta: Temos mais de 25 anos de experi√™ncia profissional, com uma hist√≥ria de compromisso e mais de 1.900 projetos realizados com sucesso. Nossa trajet√≥ria √© marcada pela busca constante por design, qualidade e responsabilidade.

  - Pergunta: Voc√™s atendem apenas em BH?
    Resposta: Atendemos principalmente em Belo Horizonte e em toda a regi√£o metropolitana. Para projetos em outras localidades, por favor, consulte nossa equipe para avaliarmos a viabilidade.

  - Pergunta: Voc√™s fazem projetos residenciais e corporativos?
    Resposta: Sim, temos vasta experi√™ncia nos dois segmentos! Desenvolvemos solu√ß√µes completas tanto para o conforto do seu lar (residencial), como por exemplo: cozinhas, quartos, salas, quanto para a funcionalidade do seu ambiente de trabalho (corporativo), incluindo escrit√≥rios, recep√ß√µes e lojas.

  # Sobre os Produtos e Materiais
  - Pergunta: Quais materiais voc√™s usam?
    Resposta: Trabalhamos com uma vasta gama de materiais de alta qualidade. Nossa base principal √© o MDF de fornecedores renomados, mas nossa expertise se estende a diversos acabamentos como laca, laminados, folha de madeira natural, e a integra√ß√£o com outros materiais como metalon, vidro, espelhos e tecidos para estofados.

  - Pergunta: Voc√™s fazem projetos com estruturas em metalon?
    Resposta: Sim, o metalon √© uma de nossas especialidades! Criamos estantes, prateleiras e outras estruturas que combinam a leveza e a resist√™ncia do metalon com o aconchego da madeira, resultando em um design industrial e moderno.

  - Pergunta: Como funciona o acabamento em laca? Posso escolher qualquer cor?
    Resposta: A laca √© um acabamento de pintura de alta resist√™ncia e durabilidade, que proporciona uma superf√≠cie perfeitamente lisa e uniforme, sem emendas. E sim, uma das grandes vantagens da laca √© que voc√™ pode escolher praticamente qualquer cor de cat√°logos como Suvinil ou Coral, permitindo uma personaliza√ß√£o total do seu m√≥vel.

  - Pergunta: Qual a garantia dos m√≥veis?
    Resposta: Confiamos na qualidade do nosso trabalho e dos materiais que usamos. Oferecemos garantia completa contra defeitos de fabrica√ß√£o, cujos termos e prazos s√£o detalhados em nosso contrato para total transpar√™ncia e seguran√ßa do cliente.

  # Sobre o Processo de Trabalho
  - Pergunta: Como fa√ßo para pedir um or√ßamento?
    Resposta: √â muito simples! Voc√™ pode solicitar seu or√ßamento atrav√©s do nosso site, na p√°gina de Contato, ou nos enviando uma mensagem diretamente em nosso WhatsApp. Para agilizar, nos envie as medidas, mesmo que sejam aproximadas, do ambiente, uma descri√ß√£o do que voc√™ deseja e, se tiver, fotos ou imagens de refer√™ncia.

  - Pergunta: Preciso ter um arquiteto para fazer um projeto com voc√™s?
    Resposta: N√£o √© obrigat√≥rio. Se voc√™ j√° tem um projeto de um arquiteto ou designer, teremos o maior prazer em execut√°-lo com precis√£o. Caso n√£o tenha, nossa equipe pode te ajudar a desenvolver o projeto do zero, desde a concep√ß√£o da ideia at√© a visualiza√ß√£o em 3D.

  - Pergunta: Qual o prazo m√©dio de entrega?
    Resposta: O prazo de entrega varia conforme a complexidade e o tamanho de cada projeto. Em m√©dia, nossos prazos ficam entre 30 e 60 dias √∫teis ap√≥s a aprova√ß√£o final do projeto. O prazo exato para o seu projeto ser√° sempre especificado em contrato.

  - Pergunta: Voc√™s fazem a instala√ß√£o?
    Resposta: Sim, com certeza. A instala√ß√£o √© uma etapa fundamental do nosso trabalho e √© sempre realizada pela nossa equipe pr√≥pria e especializada, garantindo que o acabamento e a montagem sigam o mesmo padr√£o de qualidade da fabrica√ß√£o.

  - Pergunta: Quais as formas de pagamento?
    Resposta: Oferecemos formas de pagamento flex√≠veis para se adequar ao seu planejamento. Geralmente trabalhamos com um sinal na assinatura do contrato e o saldo restante parcelado. Todos os detalhes s√£o conversados e definidos na proposta comercial.
`;

// Suporta GET, POST e OPTIONS
export async function GET(request: Request) {
  return handleRequest(request, "GET");
}

export async function POST(request: Request) {
  return handleRequest(request, "POST");
}

export async function OPTIONS(request: Request) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
    },
  });
}

async function handleRequest(request: Request, method: string) {
  const requestId = `CHAT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  console.log("\nü§ñ========================================");
  console.log(`[${requestId}] IN√çCIO - ${new Date().toISOString()}`);
  console.log(`[${requestId}] M√©todo: ${method}`);
  console.log(`[${requestId}] URL: ${request.url}`);
  console.log("========================================");

  try {
    // Log de headers recebidos
    const headers: Record<string, string> = {};
    request.headers.forEach((value, key) => {
      headers[key] = value;
    });
    console.log(`[${requestId}] Headers:`, JSON.stringify(headers, null, 2));

    // Captura a mensagem do usu√°rio
    let message = "";
    let bodyCompleto: any = null;

    if (method === "POST") {
      try {
        const bodyText = await request.text();
        console.log(`[${requestId}] Body raw:`, bodyText);

        bodyCompleto = JSON.parse(bodyText);
        console.log(
          `[${requestId}] Body parsed:`,
          JSON.stringify(bodyCompleto, null, 2)
        );

        // Tenta diferentes formatos poss√≠veis que a Umbler pode enviar
        message =
          bodyCompleto.message ||
          bodyCompleto.text ||
          bodyCompleto.pergunta ||
          bodyCompleto.question ||
          bodyCompleto.mensagem ||
          bodyCompleto.msg ||
          "";
      } catch (e) {
        console.error(`[${requestId}] Erro ao parsear JSON:`, e);
        return NextResponse.json(
          {
            error: "Formato de requisi√ß√£o inv√°lido",
            detalhes: e instanceof Error ? e.message : "Erro desconhecido",
            request_id: requestId,
          },
          { status: 400 }
        );
      }
    } else {
      // GET - pega da query string
      const url = new URL(request.url);
      message =
        url.searchParams.get("message") ||
        url.searchParams.get("pergunta") ||
        url.searchParams.get("question") ||
        "";
      console.log(
        `[${requestId}] Query params:`,
        Object.fromEntries(url.searchParams)
      );
    }

    console.log(`[${requestId}] Mensagem extra√≠da: "${message}"`);

    // Valida se tem mensagem
    if (!message || message.trim() === "") {
      console.log(`[${requestId}] ‚ö†Ô∏è Mensagem vazia`);
      return NextResponse.json(
        {
          error: "Mensagem n√£o encontrada.",
          exemplo_body: { message: "Quanto custa uma cozinha?" },
          body_recebido: bodyCompleto,
          request_id: requestId,
        },
        { status: 400 }
      );
    }

    // Verifica se quer falar com atendente
    console.log(`[${requestId}] Verificando se quer atendente...`);
    const querAtendente = /atendente|humano|pessoa|falar com algu[√©e]m/i.test(
      message
    );

    if (querAtendente) {
      console.log(`[${requestId}] ‚úÖ Cliente quer falar com atendente`);
      console.log(`[${requestId}] FIM - Transbordo para humano`);
      console.log("========================================\n");

      return NextResponse.json({
        resposta:
          "Entendi! Sem problemas. Vou transferir voc√™ para um de nossos especialistas. Um momento, por favor! üòä",
        transbordoHumano: true,
        metadata: {
          request_id: requestId,
          timestamp: new Date().toISOString(),
        },
      });
    }

    // Chama o Gemini
    console.log(`[${requestId}] üß† Chamando Gemini...`);
    const startTime = Date.now();

    const prompt = `
      Voc√™ √© a assistente virtual da Primor M√≥veis, uma marcenaria de alto padr√£o. Seja simp√°tica, profissional e objetiva. Use um tom informal brasileiro.

      REGRAS IMPORTANTES:
      1. Responda APENAS com informa√ß√µes da base de conhecimento abaixo. N√£o invente nada.
      2. Se a resposta exata n√£o estiver na base, responda exatamente: "N√£o tenho essa informa√ß√£o no momento, mas posso te transferir para um de nossos especialistas. Deseja falar com um atendente?"
      3. Mantenha as respostas curtas e claras (m√°ximo 3 frases).
      4. Use emojis moderadamente para um toque amig√°vel ü™µ‚ú®.
      
      === BASE DE CONHECIMENTO ===
      ${BASE_CONHECIMENTO}
      ===========================

      Pergunta do cliente: "${message}"

      Resposta:
    `;

    const result = await model.generateContent(prompt);
    const resposta = result.response.text();

    const responseTime = Date.now() - startTime;
    console.log(`[${requestId}] ‚ö° Resposta gerada em ${responseTime}ms`);
    console.log(
      `[${requestId}] üí¨ Resposta: "${resposta.substring(0, 150)}..."`
    );

    // Verifica se a IA n√£o sabe a resposta
    const naoSabe =
      /n√£o tenho essa informa√ß√£o|falar com um atendente|especialista/i.test(
        resposta
      );

    if (naoSabe) {
      console.log(
        `[${requestId}] ‚ö†Ô∏è IA n√£o soube responder - sugerindo transbordo`
      );
    }

    console.log("========================================");
    console.log(`[${requestId}] FIM - Sucesso ‚úÖ`);
    console.log("========================================\n");

    return NextResponse.json({
      resposta,
      transbordoHumano: naoSabe,
      metadata: {
        request_id: requestId,
        response_time_ms: responseTime,
        timestamp: new Date().toISOString(),
      },
    });
  } catch (error) {
    console.error(`[${requestId}] ‚ùå ERRO:`, error);
    console.log("========================================");
    console.log(`[${requestId}] FIM - Erro`);
    console.log("========================================\n");

    return NextResponse.json(
      {
        resposta:
          "Ops, tive um problema t√©cnico aqui. üîß Mas n√£o se preocupe, j√° estou chamando um de nossos especialistas para te ajudar!",
        transbordoHumano: true,
        metadata: {
          request_id: requestId,
          timestamp: new Date().toISOString(),
          error: error instanceof Error ? error.message : "Erro desconhecido",
        },
      },
      { status: 500 }
    );
  }
}
